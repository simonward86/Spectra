function [s]=lsco_xsec(NMC,Qvec,p,fwhm,b_mat)
%
% TRIXFIT function to define S(Q,w) and perform Monte Carlo integral
%         over resolution function
%
% Des Mcmorrow, October 2001
% Beni Thielemann, October 2006
%
% Units: At the moment will only work with meV
%
% Input variables: 
%
%        p(1:9) = Reserved!
%        p(10)   = Temperature (K)
%        p(11)   = relative magnetisation
%        p(12)   = dimer structure factor on=1/off=0
%        p(13)   = Intensity scale factor
%        p(14)   = Jl, energy scale of the continuum
%
% Output variables: s=calculated intensity
%

%----- Generate Monte Carlo sample of resolution volume

[Qh,Qk,Ql,w]=trixfit_fullmonte(NMC,Qvec,b_mat,fwhm);

%----- Edit Cross-section definition after this point
global grid_caux;
global k;
global e;

DATA_PATH_NUM_CAUX_NEW='U:\numerics\caux\';
m=p(11); % m is the relative ladder magnetisation
dsf=p(12);
Jl=p(14);
a1=[0.3904;-0.1598;0.4842];
a2=[0.3904;0.1598;0.4842];
%----- Temperature factor
n_w=1./(exp(w*11.609/p(10))-1);

% load the appropriate numerical grid, if this hasn't been done so far
% Attention: if dpip_xsec has been called and loaded a grid and you want to
% use the cross section with a different m, it won't load the data with the
% new magnetisation until you do a grid_caux=[] !
if isempty(grid_caux)                        
    k=load([DATA_PATH_NUM_CAUX_NEW 'Kfull_N_320.dat']);
    e=load([DATA_PATH_NUM_CAUX_NEW 'omega_Nw_1024_wmax_5.dat']);
    if m == 0.125
        smp0d125=load([DATA_PATH_NUM_CAUX_NEW 'Smp_JSC_D_0.5_N_320_M_40_Nw_1024_wmax_5_w_0.018_bin_sm.dat']);
        spm0d125=load([DATA_PATH_NUM_CAUX_NEW 'Spm_JSC_D_0.5_N_320_M_40_Nw_1024_wmax_5_w_0.018_bin_sm.dat']);
        szz0d125=load([DATA_PATH_NUM_CAUX_NEW 'Szz_JSC_D_0.5_N_320_M_40_Nw_1024_wmax_5_w_0.018_bin_sm.dat']);
        grid_caux=szz0d125+0.25.*smp0d125+0.25.*spm0d125;
    end
    if m == 0.25
        smp0d25=load([DATA_PATH_NUM_CAUX_NEW 'Smp_JSC_D_0.5_N_320_M_80_Nw_1024_wmax_5_w_0.018_bin_sm.dat']);        
        spm0d25=load([DATA_PATH_NUM_CAUX_NEW 'Spm_JSC_D_0.5_N_320_M_80_Nw_1024_wmax_5_w_0.018_bin_sm.dat']);
        szz0d25=load([DATA_PATH_NUM_CAUX_NEW 'Szz_JSC_D_0.5_N_320_M_80_Nw_1024_wmax_5_w_0.018_bin_sm.dat']);
        grid_caux=szz0d25+0.25.*smp0d25+0.25.*spm0d25;
    end
    if m == 0.375
        smp0d375=load([DATA_PATH_NUM_CAUX_NEW 'Smp_JSC_D_0.5_N_320_M_120_Nw_1024_wmax_5_w_0.018_bin_sm.dat']);
        spm0d375=load([DATA_PATH_NUM_CAUX_NEW 'Spm_JSC_D_0.5_N_320_M_120_Nw_1024_wmax_5_w_0.018_bin_sm.dat']);
        szz0d375=load([DATA_PATH_NUM_CAUX_NEW 'Szz_JSC_D_0.5_N_320_M_120_Nw_1024_wmax_5_w_0.018_bin_sm.dat']);
        grid_caux=szz0d375+1/4*(smp0d375+spm0d375);
    end
    if m == 0.5
        k=load([DATA_PATH_NUM_CAUX_NEW 'K_N_200.dat']);
        e=load([DATA_PATH_NUM_CAUX_NEW 'omega_N_200.dat']);
        smp0d5=load([DATA_PATH_NUM_CAUX_NEW 'Smp_JS_D_0.4999_N_200_M_100_hmax_3.dat']);
        szz0d5=load([DATA_PATH_NUM_CAUX_NEW 'Szz_JS_D_0.4999_N_200_M_100_hmax_3.dat']);
        grid_caux=szz0d5+0.5*smp0d5;
    end
end

% now calculate s for a given Qh:
for j=1:length(Qh)
    [dummy,jq(j)]=min(abs(mod(Qh(j),1)*2*pi-k));
end
if m ==0.5 % the grids for m=0.5 and m < 0.5 have different sizes!
    for j=1:length(w)
        [dummy,ie(j)]=min(abs(mod(w(j),5)*Jl-e));
    end                
else
    for j=1:length(w)
        [dummy,ie(j)]=min(abs(mod(w(j),9.98)*Jl-e));
    end
end
if dsf==0
    for j=1:length(n_w)
        s=sum(p(13)*(grid_caux(ie(j),jq(j))).*(n_w(j)+1))/NMC;
    end
else 
    s=sum(p(13)*((1-0.5*cos(2*pi*(Qh*a1(1)+Qk*a1(2)+Ql*a1(3)))-0.5*cos(2*pi*(Qh*a2(1)+Qk*a2(2)+Ql*a2(3))))*grid_caux(ie,jq)).*(n_w+1))/NMC;
end
   
s=s*2.9e13;

%====================================================================
function [Qh,Qk,Ql,w]=trixfit_fullmonte(NMC,Qvec,b_mat,fwhm)
%
% TRIXFIT function to generate Monte Carlo sampling of resolution volume
%
% Des McMorrow May 2003

xp=zeros(4,NMC);

xp(1,:)=fwhm(1)*randn(1,NMC);
xp(2,:)=fwhm(2)*randn(1,NMC);
xp(3,:)=fwhm(3)*randn(1,NMC);
xp(4,:)=fwhm(4)*randn(1,NMC);
XMC=reshape(b_mat(1:16),4,4)'*xp;

Qh=XMC(1,:)+Qvec(1);% 1 x NMC matrix
Qk=XMC(2,:)+Qvec(2);% 1 x NMC matrix
Ql=XMC(3,:)+Qvec(3);% 1 x NMC matrix
w=XMC(4,:)+Qvec(4);% 1 x NMC matrix