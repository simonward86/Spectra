N = 1E2;
rng(314152, 'twister');
x = linspace(0,10,N);
s = spec1d(x,rand(N,1),0.1*rand(N,1));
p = rand(1);

plusS(1).y = get(s+p,'y');
plusS(1).e = get(s+p,'e');
plusS(2).y = get(p+s,'y');
plusS(2).e = get(p+s,'e');
plusS(3).y = get(s+s,'y');
plusS(3).e = get(s+s,'e');
timesS(1).y = get(s*p,'y');
timesS(1).e = get(s*p,'e');
timesS(2).y = get(p*s,'y');
timesS(2).e = get(p*s,'e');
timesS(3).y = get(s*s,'y');
timesS(3).e = get(s*s,'e');
divideS(1).y = get(s/p,'y');
divideS(1).e = get(s/p,'e');
divideS(2).y = get(p/s,'y');
divideS(2).e = get(p/s,'e');
divideS(3).y = get(s/s,'y');
divideS(3).e = get(s/s,'e');
expS(1).y = get(exp(s),'y');
expS(1).e = get(exp(s),'e');
logS(1).y = get(log(s),'y');
logS(1).e = get(log(s),'e');
absS(1).y = get(abs(s-p),'y');
absS(1).e = get(abs(s-p),'e');
log10S(1).y = get(log10(s),'y');
log10S(1).e = get(log10(s),'e');
minS(1) = min(s);
maxS(1) = max(s);
[sumS.y, sumS.e] = sum(s);
[meanS.y(1), meanS.e(1)] = mean(s,'method','mean');
[meanS.y(2), meanS.e(2)] = mean(s,'method','counts');
[meanS.y(3), meanS.e(3)] = mean(s,'method','weight');
save('references_Maths.mat','plusS','timesS','divideS','expS','logS','log10S','minS','maxS','sumS','absS','meanS')